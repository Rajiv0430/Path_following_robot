                    
/* 
 *  Ex_12 - PID Controller
 *  Line Following Robot using PID Controller
 *  
 *  PortExpander
 *  -- Bit 4 - 0 
 *  -- Line sensor Module
 *  -- Bit 7 - 5
 *  -- End Stop switch Module
 *  
 *  NeoPixel
 *  -- IO5
 */
 #include <Wire.h>
#include "SSD1306Ascii.h"
#include "SSD1306AsciiWire.h"

#define SR04_I2CADDR 0x57
#define OLED_I2CAADR 0x3C

// i2c PCF8574(A) Port expander
// PCF8574  -> 0 0 1 0  0 A2 A1 A0    0 0 1 1
// PCF8574A -> 0 0 1 1  1 A2 A1 A0    1 0 1 1
#define PEXP_I2CADDR 0x23

// i2c Slave Co-processor - On the Core-Module
#define I2CADDR 0x13
// i2c Slave Co-processor - On the Robot MainBoard
#define I2CADDR_B 0x12

#define I2C_SDA 19
#define I2C_SCL 18
#define LED 2
#define IR_RECV 4
#define NEO_PIXEL 5
#define LED_COUNT 3
#include <Wire.h>



#define PEXP_I2CADDR 0x23
#define OLED_I2CAADR 0x3C



byte attinySlaveRcvArray[3];
byte attinySlaveArrayBoard[3];

uint8_t expanderData;

//Write a byte to the IO expander
void IOexpanderWrite(byte address, byte _data) {
    Wire.beginTransmission(address);
    Wire.write(_data);
    Wire.endTransmission(); 
}

//Read a byte from the IO expander
uint8_t IOexpanderRead(int address) {
    uint8_t _data;
    Wire.requestFrom(address, 1);
    if(Wire.available()) {
        _data = Wire.read();
    }
    return _data;
}



int8_t pidErrorMap[9][6] = 
{
    {1, 1, 1, 1, 0, 4},
    {1, 1, 1, 0, 0, 3},
    {1, 1, 1, 0, 1, 2},
    {1, 1, 0, 0, 1, 1},
    {1, 1, 0, 1, 1, 0},
    {1, 0, 0, 1, 1, -1},
    {1, 0, 1, 1, 1, -2},
    {0, 0, 1, 1, 1, -3},
    {0, 1, 1, 1, 1, -4},    
};

float Kp=4, Ki=0, Kd=0;
const float minSpeed = 0.5;
const float maxSpeed = 17;

float error=0, P=0, I=0, D=0, PID_value=0;
float previousError=0;
uint8_t sensor[5] = {0, 0, 0, 0, 0};

int setDirection(int motor, byte direction) {
    attinySlaveArrayBoard[0] = motor == 0 ? 0x13 : 0x23;  
    attinySlaveArrayBoard[1] = (direction >= 0) && (direction <= 2) ? direction: 0;  
    attinySlaveArrayBoard[2] = 0x00;  
    delay(10);
    Wire.beginTransmission(I2CADDR_B);
    Wire.write(attinySlaveArrayBoard, 3);
    if (Wire.endTransmission () == 0) { 
        Serial.println("i2c Write to 0x12 Sucessfull");
        return 0;
    }
    else {
        Serial.println(Wire.endTransmission());
        Serial.println("i2c Write Failed");
        return 1;
    }
}
int setMotorRunning(uint8_t motorState) {
    attinySlaveArrayBoard[0] = 0x01;  
    attinySlaveArrayBoard[1] = motorState? 0x01:0x00;  
    attinySlaveArrayBoard[2] = 0x00;  
    delay(20);
    Wire.beginTransmission(I2CADDR_B);
    Wire.write(attinySlaveArrayBoard, 3); 
    if (Wire.endTransmission () == 0) { 
        Serial.println("i2c Write to 0x12 Sucessfull");
        return 0;
    }
    else {
        Serial.println(Wire.endTransmission());
        Serial.println("i2c Write Failed");
        return 1;
    }
}
int setRPM(int motor, float rpm) {
    unsigned int rpm_x_100 = (int) (rpm * 100);
    attinySlaveArrayBoard[0] = motor == 0 ? 0x14 : 0x24;
    attinySlaveArrayBoard[1] = (rpm_x_100 & 0xff);
    attinySlaveArrayBoard[2] = (rpm_x_100 >> 8) & 0xff;   
    delay(10);
    Wire.beginTransmission(I2CADDR_B);
    Wire.write(attinySlaveArrayBoard, 3); 
    if (Wire.endTransmission () == 0) { 
        Serial.println("i2c Write to 0x12 Sucessfull");
        return 0;
    }
    else {
        Serial.println(Wire.endTransmission());
        Serial.println("i2c Write Failed");
        return 1;
    }
}
int turnDegree(int motor, int degree) {
    attinySlaveArrayBoard[0] = motor == 0 ? 0x16 : 0x26;
    attinySlaveArrayBoard[1] = (degree & 0xff);
    attinySlaveArrayBoard[2] = (degree >> 8) & 0xff;   
    delay(10);
    Wire.beginTransmission(I2CADDR_B);
    Wire.write(attinySlaveArrayBoard, 3); 
    if (Wire.endTransmission () == 0) { 
        Serial.println("i2c Write to 0x12 Sucessfull");
        return 0;
    }
    else {
        Serial.println(Wire.endTransmission());
        Serial.println("i2c Write Failed");
        return 1;
    }
}
int checkMotorStatus(int motor){
  Wire.requestFrom(I2CADDR_B, 1);
  attinySlaveArrayBoard[0] = Wire.read();
  Wire.endTransmission();
  return (motor == 1) ? (attinySlaveArrayBoard[0] & 0x01) : ((attinySlaveArrayBoard[0] >> 1) & 0x01);
}





void readSensorValues()
{    expanderData = IOexpanderRead(PEXP_I2CADDR);
    sensor[0] = bitRead(expanderData, 0);
    sensor[1] = bitRead(expanderData, 1);
    sensor[2] = bitRead(expanderData, 2);
    sensor[3] = bitRead(expanderData, 3);
    sensor[4] = bitRead(expanderData, 4);
    for (byte i = 0; i < 9; i++) {     
        if (sensor[0] == pidErrorMap[i][0] && sensor[1] == pidErrorMap[i][1] && 
            sensor[2] == pidErrorMap[i][2] && sensor[3] == pidErrorMap[i][3] && 
            sensor[4] == pidErrorMap[i][4]) {
            error = pidErrorMap[i][5];
        }
        if (sensor[0] + sensor[1] + sensor[2] + sensor[3] + sensor[4] == 5) {
        } 
        else if (sensor[0] + sensor[1] + sensor[2] + sensor[3] + sensor[4] == 0) {
        } 
        else {            
        }
    }
}
void calculatePID(){
    P = error;
    I = I + error;
    D = error - previousError;
    PID_value = (Kp*P) + (Ki*I) + (Kd*D);
    previousError = error;
}
void setMotorSpeed(int left, int right){                          
    Serial.print("Left = "); Serial.print(String(left));
    Serial.print(" Right = ");Serial.println(String(right));
    delay(100);    
    setRPM(0, left);
    setRPM(1, right);  
}

void motorControl(){
    float leftMotorSpeed = maxSpeed - PID_value;
    float rightMotorSpeed = maxSpeed + PID_value;
    leftMotorSpeed = constrain(leftMotorSpeed, minSpeed, maxSpeed);
    rightMotorSpeed = constrain(rightMotorSpeed, minSpeed, maxSpeed);    
    setMotorSpeed(leftMotorSpeed, rightMotorSpeed);  
}




void setup() {
    Wire.begin(I2C_SDA, I2C_SCL);   
    Serial.begin(115200); //set up serial library baud rate to 115200
    
    // Initialize PCF8574 configuration -> Pull High to Read
    IOexpanderWrite(PEXP_I2CADDR, 0xff);

    delay(2000);
}

void loop() {
   
    setMotorRunning(1);
    readSensorValues();
    calculatePID();
    motorControl();
  
}
                    
                
                    
                
